kubectl get nodes
kubectl get namespaces
kubectl get pods
kubectl get pods -A
kubectl get services

docker build -t kv8s01/k8s-demo-app .

### 解释：

这是一个用于构建 Docker 镜像的命令。

---

### 参数解析：
1. **`docker build`**：
   - Docker 命令，用于根据指定的 Dockerfile 构建 Docker 镜像。

2. **`-t`**：
   - 选项，表示为构建的镜像指定一个标签（tag）。
   - 格式：`<仓库名>/<镜像名>:<标签>`
     - 在这里，仓库名是 `kv8s01`，镜像名是 `k8s-demo-app`。
     - 没有明确指定标签时，默认使用 `latest`。

3. **`kv8s01/k8s-demo-app`**：
   - 构建镜像的名称和标识。
   - 其中：
     - **`kv8s01`**：镜像的仓库名，通常是 Docker Hub 用户名。
     - **`k8s-demo-app`**：镜像的名称，表示这个镜像是一个 Kubernetes 的示例应用。
     - **`:latest`（隐含标签）**：如果未指定标签，则默认使用 `latest`。

4. **`.`（点）**：
   - 表示构建上下文的路径。
   - 当前目录作为构建上下文，其中必须包含 Dockerfile，以及构建镜像所需的其他文件。

---

### 整体作用：
- **构建镜像**：
  根据当前目录下的 `Dockerfile` 和相关文件，构建一个名为 `kv8s01/k8s-demo-app` 的 Docker 镜像。
- **镜像标签**：
  给镜像打上标签 `latest`（默认标签）。
- **上传准备**：
  构建完成后，这个镜像可以推送到 Docker Hub（或其他镜像仓库），方便其他用户拉取使用。

---

### 使用场景：
1. **本地构建**：
   - 开发者在本地构建镜像，并在 Kubernetes 或 Docker 中运行。
2. **持续集成/持续部署（CI/CD）**：
   - 在 CI/CD 管道中，构建镜像并推送到镜像仓库。
3. **分发应用**：
   - 将构建的镜像分发给团队成员或部署到生产环境。

---

### 示例运行：
如果成功运行该命令，Docker 会按照以下步骤执行：
1. 查找当前目录下的 `Dockerfile`。
2. 解析 Dockerfile 中的指令并构建镜像。
3. 为构建的镜像打上标签 `kv8s01/k8s-demo-app:latest`。

构建完成后，运行以下命令可以查看新创建的镜像：

docker images
------------------------------------------------------
docker run -p 8080:80 -e MESSAGE=Hello -e USERNAME=kv8s01 -e PASSWORD=password kv8s01/k8s-demo-app
### **解析与讲解**
#### 1. **`docker run`**
   - 启动一个新的容器实例。
   - 使用 `docker run` 命令来运行镜像生成的容器。
#### 2. **`-p 8080:80`**
   - **作用**：将主机的端口 `8080` 映射到容器的端口 `80`。
   - **具体解释**：
     - `8080`：主机（外部）监听的端口。
     - `80`：容器内服务运行的端口。
   - 通过这种方式，外部用户访问主机的 `http://localhost:8080` 时，会将请求转发到容器中的 `80` 端口。
#### 3. **`-e`**
   - **作用**：设置环境变量。
   - **具体环境变量**：
     - **`MESSAGE=Hello`**：
       - 容器内的 `MESSAGE` 环境变量值为 `Hello`。
       - 在 PHP 应用中会通过 `$_ENV["MESSAGE"]` 获取该值。
     - **`USERNAME=kv8s01`**：
       - 容器内的 `USERNAME` 环境变量值为 `kv8s01`。
       - 来源可能是 ConfigMap（如 Kubernetes 中的非敏感配置信息）。
     - **`PASSWORD=password`**：
       - 容器内的 `PASSWORD` 环境变量值为 `password`。
       - 来源可能是 Secret（存储敏感数据）。
#### 4. **`kv8s01/k8s-demo-app`**
   - **作用**：指定需要运行的 Docker 镜像。
   - **解释**：
     - `kv8s01` 是 Docker Hub 上的用户仓库名。
     - `k8s-demo-app` 是镜像的名称。
     - 默认会使用 `latest` 标签，如果镜像有多个版本，可以通过 `:` 指定特定版本（例如 `kv8s01/k8s-demo-app:1.0`）。
### **执行结果**
1. 容器启动后：
   - 容器中的 PHP 应用程序会读取通过 `-e` 传递的环境变量 `MESSAGE`、`USERNAME` 和 `PASSWORD`，并将它们用于动态生成页面或其他业务逻辑。
   - 主机的 `8080` 端口提供外部访问，映射到容器内的 `80` 端口。
2. 示例访问：
   - 访问 `http://localhost:8080` 会触发容器中应用的页面显示。
   - 页面可能会输出类似的内容：
     Message: Hello
     Username: kv8s01
     Password: password
### **总结**
这条命令通过 Docker 启动了一个运行中的容器实例，并通过环境变量动态配置了容器内的应用行为。同时，端口映射允许外部用户通过主机访问容器内的服务。这种方式非常适合本地开发和调试。
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
列出容器一览,包括他的container_id
docker container ls -a
进入容器内部：
docker exec -it <container_id> /bin/bash
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

